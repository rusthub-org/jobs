schema {
  query: QueryRoot
  mutation: MutationRoot
}

type Category {
  id: ObjectId!
  nameZh: String!
  descriptionZh: String!
  nameEn: String!
  descriptionEn: String!
  slug: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdAtNyrsq: String!
  updatedAtNyrsq: String!
  projects: ProjectsResult!
}

input CategoryNew {
  nameZh: String!
  descriptionZh: String!
  nameEn: String!
  descriptionEn: String!
}

type CategoryUser {
  id: ObjectId!
  userId: ObjectId!
  categoryId: ObjectId!
}

input CategoryUserNew {
  userId: ObjectId!
  categoryId: ObjectId!
}

scalar DateTime

type File {
  id: ObjectId!
  name: String!
  location: String!
}

input FileNew {
  name: String!
  location: String!
}

type MutationRoot {
  userRegister(userNew: UserNew!): User!
  userChangePassword(pwdCur: String!, pwdNew: String!, token: String!): User!
  userUpdateProfile(userNew: UserNew!, token: String!): User!
  userUpdateOneFieldById(
    userId: ObjectId!
    fieldName: String!
    fieldVal: String!
  ): User!
  projectNew(projectNew: ProjectNew!): Project!
  projectUpdateOneFieldById(
    projectId: ObjectId!
    fieldName: String!
    fieldVal: String!
  ): Project!
  fileNew(fileNew: FileNew!): File!
  projectFileNew(projectFileNew: ProjectFileNew!): ProjectFile!
  categoryNew(categoryNew: CategoryNew!): Category!
  categoryUserNew(categoryUserNew: CategoryUserNew!): CategoryUser!
  topicNew(topicNew: TopicNew!): Topic!
  topicsNew(topicNames: String!): [Topic!]!
  topicUserNew(topicUserNew: TopicUserNew!): TopicUser!
  topicProjectNew(topicProjectNew: TopicProjectNew!): TopicProject!
  wishNew(wishNew: WishNew!): Wish!
}

scalar ObjectId

type PageInfo {
  currentStuff: String
  currentPage: Int
  firstCursor: ObjectId
  lastCursor: ObjectId
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Project {
  id: ObjectId!
  userId: ObjectId!
  categoryId: ObjectId!
  subject: String!
  investment: Int!
  currencyType: String!
  negotiated: Boolean!
  duration: Int!
  workday: Boolean!
  content: String!
  examples: String!
  workerType: String!
  workerInfo: String!
  contactUser: String!
  contactPhone: String!
  contactEmail: String!
  contactIm: String!
  external: Boolean!
  thirdPartyLink: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  hits: Int!
  applicants: Int!
  language: String!
  status: Int!
  contentHtml: String!
  workerInfoHtml: String!
  createdAtNyrsq: String!
  updatedAtNyrsq: String!
  user: User!
  category: Category!
  topics: [Topic!]!
  files: [File!]!
}

type ProjectFile {
  id: ObjectId!
  userId: ObjectId!
  projectId: ObjectId!
  fileId: ObjectId!
}

input ProjectFileNew {
  userId: ObjectId!
  projectId: ObjectId!
  fileId: ObjectId!
}

input ProjectNew {
  userId: ObjectId!
  categoryId: ObjectId!
  subject: String!
  investment: Int!
  currencyType: String!
  negotiated: Boolean!
  duration: Int!
  workday: Boolean!
  content: String!
  examples: String!
  workerType: String!
  workerInfo: String!
  contactUser: String!
  contactPhone: String!
  contactEmail: String!
  contactIm: String!
  language: String!
}

type ProjectsResult {
  pageInfo: PageInfo!
  resCount: ResCount!
  currentItems: [Project!]!
}

type QueryRoot {
  userSignIn(signature: String!, password: String!): SignInfo!
  userById(id: ObjectId!): User!
  userByEmail(email: String!): User!
  userByUsername(username: String!): User!
  users(
    fromPage: Int!
    firstOid: String!
    lastOid: String!
    status: Int!
  ): UsersResult!
  usersByQuality(
    qualityField: String!
    fromPage: Int!
    firstOid: String!
    lastOid: String!
    status: Int!
  ): UsersResult!
  projectById(projectId: ObjectId!): Project!
  projectRandomId: ObjectId!
  projects(
    fromPage: Int!
    firstOid: String!
    lastOid: String!
    status: Int!
  ): ProjectsResult!
  projectsInPosition(
    username: String!
    position: String!
    limit: Int!
  ): [Project!]!
  projectsByUserId(
    userId: ObjectId!
    fromPage: Int!
    firstOid: String!
    lastOid: String!
    status: Int!
  ): ProjectsResult!
  projectsByUsername(
    username: String!
    fromPage: Int!
    firstOid: String!
    lastOid: String!
    status: Int!
  ): ProjectsResult!
  projectsByCategoryId(
    categoryId: ObjectId!
    fromPage: Int!
    firstOid: String!
    lastOid: String!
    status: Int!
  ): ProjectsResult!
  projectsByCategorySlug(
    categorySlug: String!
    fromPage: Int!
    firstOid: String!
    lastOid: String!
    status: Int!
  ): ProjectsResult!
  projectsByTopicId(
    topicId: ObjectId!
    fromPage: Int!
    firstOid: String!
    lastOid: String!
    status: Int!
  ): ProjectsResult!
  projectsByTopicSlug(
    topicSlug: String!
    fromPage: Int!
    firstOid: String!
    lastOid: String!
    status: Int!
  ): ProjectsResult!
  projectsByInvestment(
    investmentMin: Int!
    investmentMax: Int!
    fromPage: Int!
    firstOid: String!
    lastOid: String!
    status: Int!
  ): ProjectsResult!
  projectsByWorkerType(
    workerType: String!
    fromPage: Int!
    firstOid: String!
    lastOid: String!
    status: Int!
  ): ProjectsResult!
  projectsByExternal(
    external: Boolean!
    fromPage: Int!
    firstOid: String!
    lastOid: String!
    status: Int!
  ): ProjectsResult!
  fileById(id: ObjectId!): File!
  filesByProjectId(projectId: ObjectId!): [File!]!
  categories: [Category!]!
  categoriesByUserId(userId: ObjectId!): [Category!]!
  categoriesByUsername(username: String!): [Category!]!
  categoryById(id: ObjectId!): Category!
  categoryBySlug(slug: String!): Category!
  topicById(id: ObjectId!): Topic!
  topicBySlug(slug: String!): Topic!
  topics: [Topic!]!
  topicsByProjectId(projectId: ObjectId!): [Topic!]!
  keywordsByUserId(userId: ObjectId!): [Topic!]!
  keywordsByUsername(username: String!): [Topic!]!
  topicsByUserId(userId: ObjectId!): [Topic!]!
  topicsByUsername(username: String!): [Topic!]!
  wishes(published: Int!): [Wish!]!
  wishRandom(username: String!): Wish!
}

type ResCount {
  pagesCount: Int
  totalCount: Int
}

type SignInfo {
  username: String!
  token: String!
}

type Topic {
  id: ObjectId!
  name: String!
  quotes: Int!
  slug: String!
  projects: ProjectsResult!
}

input TopicNew {
  name: String!
  quotes: Int! = 1
}

type TopicProject {
  id: ObjectId!
  userId: ObjectId!
  projectId: ObjectId!
  topicId: ObjectId!
}

input TopicProjectNew {
  userId: ObjectId!
  projectId: ObjectId!
  topicId: ObjectId!
}

type TopicUser {
  id: ObjectId!
  userId: ObjectId!
  topicId: ObjectId!
}

input TopicUserNew {
  userId: ObjectId!
  topicId: ObjectId!
}

type User {
  id: ObjectId!
  username: String!
  email: String!
  cred: String!
  nickname: String!
  phoneNumber: String!
  phonePublic: Boolean!
  imAccount: String!
  imPublic: Boolean!
  website: String!
  introduction: String!
  workerQuality: Int!
  bossQuality: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Int!
  introductionHtml: String!
  createdAtNyrsq: String!
  updatedAtNyrsq: String!
  keywords: [Topic!]!
  topics: [Topic!]!
  projects(status: Int!): ProjectsResult!
}

input UserNew {
  username: String!
  email: String!
  cred: String!
  nickname: String!
  phoneNumber: String!
  phonePublic: Boolean!
  imAccount: String!
  imPublic: Boolean!
  website: String!
  introduction: String!
}

type UsersResult {
  pageInfo: PageInfo!
  resCount: ResCount!
  currentItems: [User!]!
}

type Wish {
  id: ObjectId!
  userId: ObjectId!
  aphorism: String!
  author: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean!
  createdAtNyrsq: String!
  updatedAtNyrsq: String!
  user: User!
}

input WishNew {
  userId: ObjectId!
  aphorism: String!
  author: String!
}
